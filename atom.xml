<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[地平线上的一匹狼]]></title>
  <link href="http://834930269.github.io/atom.xml" rel="self"/>
  <link href="http://834930269.github.io/"/>
  <updated>2016-11-08T15:45:18+08:00</updated>
  <id>http://834930269.github.io/</id>
  <author>
    <name><![CDATA[CasaLan]]></name>
    <email><![CDATA[m13569859563@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[POJ题目翻译-3069-Saruman's-Army]]></title>
    <link href="http://834930269.github.io/blog/2016/11/05/fanyi1/"/>
    <updated>2016-11-05T11:12:03+08:00</updated>
    <id>http://834930269.github.io/blog/2016/11/05/fanyi1</id>
    <content type="html"><![CDATA[<h1><center>Saruman's Army</h1>


<blockquote><p>Saruman the White must lead his army along a straight path from Isengard to Helm’s Deep. To keep track of his forces, Saruman distributes seeing stones, known as palantirs, among the troops. Each palantir has a maximum effective range of R units, and must be carried by some troop in the army (i.e., palantirs are not allowed to “free float” in mid-air). Help Saruman take control of Middle Earth by determining the minimum number of palantirs needed for Saruman to ensure that each of his minions is within R units of some palantir.</p></blockquote>

<p>翻译:</p>

<blockquote><p>白人萨鲁曼必须领导他的军队从艾辛格圣盔谷沿着一条笔直的道路(前进),跟着他的部队,在军队中,萨鲁曼将他看到的石头分布称为Palantirs.每个Palantirs有个最大的有效范围R,每个军队必须有一个骑兵队(i.e.(即),不存在浮空的Palantirs),帮助萨鲁曼控制中土世界(？)通过确定最小需要的Palantirs数目来确保每一个以R为单元的Palantirs内都有它的一个仆从.</p></blockquote>

<!--more-->


<p>Sample Input</p>

<p>0 3
10 20 20
10 7
70 30 1 7 15 20 50
-1 -1</p>

<p>Sample Output</p>

<p>2
4</p>

<p>Code:<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="c1">#include&lt;algorithm&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">void</span> <span class="n">solve</span><span class="p">(</span><span class="n">int</span> <span class="n">X</span><span class="o">[]</span><span class="p">,</span><span class="n">int</span> <span class="n">N</span><span class="p">,</span><span class="n">int</span> <span class="n">R</span><span class="p">){</span>
</span><span class='line'>     <span class="n">sort</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">X</span><span class="o">+</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>    <span class="n">int</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">){</span><span class="o">//</span><span class="err">每次更新两个点</span><span class="p">,</span><span class="err">一个是找到第一个需要标记的点</span><span class="p">,</span><span class="err">一个是找到第二个需要标记的点</span><span class="p">,</span><span class="err">这样才能开始下一个循环</span>
</span><span class='line'>        <span class="n">int</span> <span class="no">Begin</span><span class="o">=</span><span class="n">X</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&amp;&amp;</span><span class="n">X</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;=</span><span class="no">Begin</span><span class="o">+</span><span class="n">R</span><span class="p">)</span><span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">int</span> <span class="no">End</span><span class="o">=</span><span class="n">X</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&amp;&amp;</span><span class="n">X</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;=</span><span class="no">End</span><span class="o">+</span><span class="n">R</span><span class="p">)</span><span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ans</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;%d</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span><span class="n">ans</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">int</span> <span class="n">N</span><span class="p">,</span><span class="n">R</span><span class="p">,</span><span class="n">X</span><span class="o">[</span><span class="mi">2001</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s2">&quot;%d %d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">R</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">N</span><span class="p">)</span> <span class="o">!=</span> <span class="no">EOF</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">R</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">N</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)){</span><span class="o">//</span><span class="err">这题必须有</span><span class="no">EOF</span><span class="p">,</span><span class="err">不然超时</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s2">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">X</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">solve</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">N</span><span class="p">,</span><span class="n">R</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一个故事]]></title>
    <link href="http://834930269.github.io/blog/2016/07/05/thef/"/>
    <updated>2016-07-05T18:54:42+08:00</updated>
    <id>http://834930269.github.io/blog/2016/07/05/thef</id>
    <content type="html"><![CDATA[<h1><center><font color=blue>浮游与花</font></h1>

<p>我是一只浮游.<br>
我懵懂的来到了这个世界.<br>
这是我的第一篇日记.<br>
也是最后一篇.<br><!--more-->
我出生在这朵花上,于我而言,他是我最好的朋友.<br>
我喜欢他..但他不知道..我也没说.我看到了朝阳,我向他说,原来阳光是这样啊.<br>
他没有回答.<br>
啊..我已经待在他身边一个小时了啊..<br>
我看到有很多很多蜜蜂从他和我的身边飞过,看了看我们,便走了.<br>
他也没有抱怨.<br>
我不舍得.但我飞走了.因为我感觉我长大了.而且于我于他.我想,我只有一朝一夕,而他却有一个季节.<br>
他需要一个更好的朋友&hellip;<br>
飞着.我看到了天空,我看到了大树的顶峰,我看到了草地,看到了泥潭,看到了飞翔的鸟,看到了无数无数奔流不息的生命.<br>
我觉得我想知道更多,为此我需要飞得更远,我觉得我的时间还有很多,我觉得我向往自由..<br>
呐&hellip;<br>
我看到了很多很多.但我仍然没有飞出这片森林.<br>
天黑了.<br>
我看到了夕阳,看到了血红的天宇,看到了休息的动物,听到了蟋蟀的叫声,看到了猫头鹰伯伯张开了眼睛.<br>
但我瞌睡了&hellip;<br>
我感觉到似乎我睡着了就会开始做一场无穷无尽的梦&hellip;<br>
我想起了我童年的朋友&hellip;<br>
&ldquo;那朵花&rdquo;&hellip;我是不是太过于追求我想要的东西了&hellip;<br>
我是不是太过于向往自由了.<br>
为什么我会这么想你,但我却没有力气飞回去了.<br>
很讽刺的不是么&hellip;我明明那么的喜欢你&hellip;却要离你而去,为了我自己&hellip;<br>
可我却想你了,为了自己飞到了这里.却想你了,我明白我的时间不多.但我想要的太多.我失去了你&hellip;<br>
我不明白自己是开心还是伤心.<br>
我看着月亮想象着有这个世界上一只蜜蜂可以得到你最甜的内心,而不是像我一样只能静静陪你,絮絮叨叨说着我的事情.而它可以陪你一季,我却只有一天.<br>
好像又有些开心了&hellip;<br>
呐&hellip;如果我能带着记忆重生&hellip;我一定会选择自己一只蜉蝣,不去认识任何其他&hellip;<br>
然后出生在你的旁边.静静的看着你,无数次重生,无数次闭眼&hellip;<br>
如此一想,死亡并不可怕啊.<br>
哈&hellip;<br>
&hellip;?<br>
我没有泪水啊,我也没法叫,这个凄凉孤单的夜空下似乎只剩下了我和你,我看不到你,但我知道你在,我笑着扑打着翅膀,翅膀似乎在哀鸣.<br>
好累&hellip;<br>
我真的想睡了&hellip;<br>
算了&hellip;<br>
晚安&hellip;夜空下看不见的你.<br></p>

<p>&mdash;&mdash;如果可以回去,我宁愿抛去所有欲望,如果你愿意,陪我一生好么&hellip;因为我抛去了所有欲望&hellip;那我可以问你句&hellip;如果只有心灵,你爱我么&hellip;</p>

<pre><code>--版权:CasaLan.keep moving forward
</code></pre>

<p>原文链接:<a href="http://be-sunshine.cn/blog/2016/07/05/thef/" title="原文链接">http://be-sunshine.cn/blog/2016/07/05/thef/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[动态规划-基础-完全背包问题]]></title>
    <link href="http://834930269.github.io/blog/2016/06/22/first/"/>
    <updated>2016-06-22T13:46:47+08:00</updated>
    <id>http://834930269.github.io/blog/2016/06/22/first</id>
    <content type="html"><![CDATA[<p><font face="楷体" ></p>

<h3>先以从问题下手作为突破吧.</h3>

<pre><code>题目来源:HDU-4508
</code></pre>

<h2><center>湫湫系列故事——减肥记I</h2>

<p>Problem Description:</p>

<blockquote><p>对于吃货来说，过年最幸福的事就是吃了，没有之一！<br>
但是对于女生来说，卡路里（热量）是天敌啊！<br>
资深美女湫湫深谙“胖来如山倒，胖去如抽丝”的道理，所以她希望你能
帮忙制定一个食谱，能使她吃得开心的同时，不会制造太多的天敌。<br>
当然，为了方便你制作食谱，湫湫给了你每日食物清单，上面描述了当     <br/>
天她想吃的每种食物能带给她的幸福程度，以及会增加的卡路里量。</p></blockquote>

<!--more-->


<p>Input:</p>

<blockquote><p>输入包含多组测试用例。<br>
每组数据以一个整数n开始，表示每天的食物清单有n种食物。<br>
接下来n行，每行两个整数a和b，其中a表示这种食物可以带给湫湫的幸福值（数值越大，越幸福），b表示湫湫吃这种食物会吸收的卡路里量。<br>
最后是一个整数m，表示湫湫一天吸收的卡路里不能超过m。<br></p>

<p>　　[Technical Specification]<br>
　　1. 1 &lt;= n &lt;= 100<br>
　　2. 0 &lt;= a,b &lt;= 100000<br>
　　3. 1 &lt;= m &lt;= 100000<br></p></blockquote>

<p>Output:</p>

<blockquote><p>对每份清单，输出一个整数，即满足卡路里吸收量的同时，湫湫可获得的最大幸福值。</p></blockquote>

<p>Sample Input:</p>

<blockquote><p>3<br>
3 3<br>
7 7<br>
9 9<br>
10<br>
5<br>
1 1<br>
5 3<br>
10 3<br>
6 8<br>
7 5<br>
6　　<br></p></blockquote>

<p>Sample Output:</p>

<blockquote><p>10<br>
20</p></blockquote>

<p>Source:
    <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4508" title="Problem-4508">Problem-4508</a></p>

<p>AC代码:<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include&lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include&lt;cstring&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">dp</span><span class="p">[</span><span class="mi">100006</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">~</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">dp</span><span class="p">));</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">clu</span><span class="p">[</span><span class="mi">102</span><span class="p">],</span><span class="n">sen</span><span class="p">[</span><span class="mi">102</span><span class="p">],</span><span class="n">aim</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">sen</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="o">&amp;</span><span class="n">clu</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>                    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">aim</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">clu</span><span class="p">[</span><span class="n">i</span><span class="p">];</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">aim</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="n">clu</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">+</span><span class="n">sen</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">dp</span><span class="p">[</span><span class="n">aim</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来借此题来介绍背包问题代码的思路.<br></p>

<pre><code>首先,我们定义一个dp数组来记忆(储存)"每个卡路里下的最大幸福
度"←这句很重要!
</code></pre>

<p>依照题意添加输入数据.</p>

<pre><code>然后我们借用两个一维数组来储存每个食物会增加的卡路里和幸服度       
clu[],sen[],以及aim:最大卡路里.
</code></pre>

<p>然后我们来探究dp数组究竟是用来干什么的.</p>

<pre><code>正如上面所述,dp数组是来记忆"每个卡路里下的最大幸福度"
那就表明这个数组内的元素并不一定是不变的.
我们对输入的几个食物进行遍历,每个食物被遍历到时,通过dp
数组来进行"每个卡路里下最大幸福值"的更新.
</code></pre>

<p>如.</p>

<pre><code>输入最大卡路里为10.
那么需要用到的总共是dp[0]~dp[10]
dp[0],dp[1]…dp[10].
数组下标即是对应的卡路里.
而dp数组储存,不,记忆的是每个(下标)卡路里下最大的幸福度.
</code></pre>

<p>那么我们拐回去看代码.
这里我对代码内的dp数组直接进行分析:</p>

<pre><code>for(int i=0;i&lt;N;i++)
        for(int j=clu[i];j&lt;=aim;j++)
        {
            dp[j]=max(dp[j],dp[j-clu[i]]+sen[i]);
        }
这句里,唯一的一个赋值式是dp[j]=max(dp[j];dp[j-clu[i]]+sen[i]);
我仅解释为什么j=clu[i]和dp[j-clu[i]]:
j=clu[i]从遍历到的食物的clu[i]开始更新dp数组.

而dp[j-clu[i]],则表示j-clu[i]这个卡路里在dp数组内记忆的
最大幸福值，比较,然后更新.
</code></pre>

<p>另外推荐一个网站,可以学习算法:
    <a href="https://www.julyedu.com/video/play/27" title="七月在线-直播coding-动态规划">七月在线-直播coding-动态规划</a></p>

<p>欢迎提意见,我也是小白~</p>

<pre><code>    --版权:CasaLan.keep moving forward
</code></pre>

<p>原文链接:<a href="http://be-sunshine.cn/blog/2016/06/22/first/" title="原文链接">http://be-sunshine.cn/blog/2016/06/22/first/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[上瘾的解药]]></title>
    <link href="http://834930269.github.io/blog/2016/06/21/zanshi/"/>
    <updated>2016-06-21T17:01:11+08:00</updated>
    <id>http://834930269.github.io/blog/2016/06/21/zanshi</id>
    <content type="html"><![CDATA[<p><font face="楷体" >
博客上瘾般的的搭建就告一段落了吧,接下来要收心回去看算法了..<br>
折腾这个博客给我带来的更多的并不是喜悦,而是终于有了属于自己一个人的小天地..<br>
的那份安全感!!!!<br>
我啊,从小就有一个毛病.总是喜欢还没做完这个就已经喜欢上了那个..<br>
典型"猴子摘葡萄"..<br>
什么都<!--more-->干过,什么都不精通,如果在一个不属于我的地方就感到满足..<br>
还要如何承担自己的梦想？<br>
印象最深的是Bill Gates夫妇在斯坦的演讲.他们谈及了世界上会有很多饥寒交迫的人.而我们生来无忧无虑,更多的顾虑是对于自己的生活..<br>
我厌倦了..<br>
愿明天如我所愿.如果不..<br></p>

<p>&ldquo;倒下就倒下吧,记得爬起来.&rdquo;</p>

<pre><code> --CasaLan.keep moving forward
</code></pre>

<p></font></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[或许还会看到那懵懂的少年]]></title>
    <link href="http://834930269.github.io/blog/2016/06/19/mytitle/"/>
    <updated>2016-06-19T14:33:11+08:00</updated>
    <id>http://834930269.github.io/blog/2016/06/19/mytitle</id>
    <content type="html"><![CDATA[<p><font face="楷体" >
   再见,时间.</p>

<p>   喧嚣的世界,在独处的时候终于变成了小孩.</p>

<p>   再见,懵懂的少年.</p>

<p>   是再见.还是再次相见.<!--more--></p>

<p>   时间就这样带我们离开了童年.</p>

<p>   你好,明天.</p>

<p>   我只能如此安慰自己了罢.</p>

<pre><code> --CasaLan.keep moving forward
</code></pre>

<p></font>
<font face="楷体" color=1E90FF><B></p>
]]></content>
  </entry>
  
</feed>
